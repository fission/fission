name: gcloud-workflow
on:
  pull_request:
    branches:
      - fission-github-actions
    types: [labeled]
jobs:
  fission-on-gke-gcloud:
    runs-on: ubuntu-latest
    if: github.event.label.name == 'gcloud'
    env: 
      CLUSTER_NAME: ${{ secrets.GKE_CLUSTER_NAME }}
      ZONE_NAME: us-central1-c
      APPLICATION_CREDENTIALS: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}
      PROJECT_ID: ${{ secrets.PROJECT_ID }}      
    steps:
      - name: Checkout fisson from master
        uses: actions/checkout@v2
        with:
          ref: gke-github-actions
    
      - uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
        with:
          version: '290.0.1'
          service_account_key: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}
          project_id: ${{ secrets.PROJECT_ID }}

      - run: |
          echo "$APPLICATION_CREDENTIALS" | base64 -d > /tmp/account.json
          gcloud auth activate-service-account --key-file=/tmp/account.json --project "$PROJECT_ID"
          gcloud container clusters create "$CLUSTER_NAME" --zone "$ZONE_NAME"
          gcloud container clusters get-credentials "$CLUSTER_NAME" --zone "$ZONE_NAME"


        #      - uses: agiwalpooja20/spin-gke-action@master
        #        env:
        #          PROJECT_ID: ${{ secrets.PROJECT_ID }}
        #          APPLICATION_CREDENTIALS: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}
        #          CLUSTER_NAME: ${{ secrets.GKE_CLUSTER_NAME }}
        #          ZONE_NAME: us-central1-c

          #      - name: kubectl - Google Cloud GKE cluster.
          #        uses: ameydev/gke-kubectl-action@master
          #        env:
          #          PROJECT_ID: ${{ secrets.PROJECT_ID }}
          #          APPLICATION_CREDENTIALS: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}
          #          CLUSTER_NAME: ${{ secrets.GKE_CLUSTER_NAME }}
          #          ZONE_NAME: us-central1-c
          #        with:
          #          args: config view 

      - name: Testing
        run: |
          kubectl config view
          kubectl config current-context
          kubectl get ns
          kubectl create namespace fission

          #      - name: Testing
          #        run: |
          #          kubectl cluster-info
          #          kubectl get pods -n kube-system
          #          echo "current-context:" $(kubectl config current-context)
          #          echo "environment-kubeconfig:" ${KUBECONFIG}        
          #
          #      - name: Set up Go 1.12
          #        uses: actions/setup-go@v1
          #        with:
          #          go-version: 1.12
          #
          #      - name: Download skaffold
          #        run: |
          #          curl -Lo skaffold https://storage.googleapis.com/skaffold/releases/latest/skaffold-linux-amd64
          #          chmod +x skaffold
          #          sudo mv skaffold /usr/local/bin
          #          skaffold version
          #
          #
          #      - name: Deploy using skaffold
          #        run: |
          #          cd /home/runner/work/fission/fission
          #          export GO111MODULE=on
          #          go mod vendor
          #          ./hack/verify-gofmt.sh
          #          ./hack/verify-govet.sh
          #          sed -i "s/<DOCKERHUB_REPO>/fission/g" skaffold.yaml
          #          helm repo add helm_repo https://kubernetes-charts.storage.googleapis.com
          #          TAG=213 skaffold run
          #
          #      - name: Verify the pods
          #        if: success() || failure()
          #        run: |
          #          kubectl get pods -n fission
          #          kubectl get pods -n fission -o go-template --template="{{range .items}}{{range .spec.containers}}{{.image}} {{end}} {{end}}"
          #
          #      - name: Before_script
          #        if: success() || failure()
          #        run: |
          #          cd /home/runner/work/fission/fission
          #          go mod download
          #          #          ./hack/verify-staticcheck.sh
          #          helm lint charts/fission-all/ charts/fission-core/
          #          ./hack/runtests.sh
          #          ./test/build.sh
          #
          #      - name: Upgrade steps
          #        if: success() || failure()
          #        run: |
          #          cd /home/runner/work/fission/fission
          #          ./test/test.sh        
          #          ./test/upgrade/fission_upgrade_test.sh 
          #

