/*
Copyright The Fission Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/fission/fission/pkg/apis/core/v1"
	v2 "k8s.io/api/autoscaling/v2"
)

// ExecutionStrategyApplyConfiguration represents an declarative configuration of the ExecutionStrategy type for use
// with apply.
type ExecutionStrategyApplyConfiguration struct {
	ExecutorType          *v1.ExecutorType                    `json:"ExecutorType,omitempty"`
	MinScale              *int                                `json:"MinScale,omitempty"`
	MaxScale              *int                                `json:"MaxScale,omitempty"`
	TargetCPUPercent      *int                                `json:"TargetCPUPercent,omitempty"`
	SpecializationTimeout *int                                `json:"SpecializationTimeout,omitempty"`
	Metrics               []v2.MetricSpec                     `json:"hpaMetrics,omitempty"`
	Behavior              *v2.HorizontalPodAutoscalerBehavior `json:"hpaBehavior,omitempty"`
}

// ExecutionStrategyApplyConfiguration constructs an declarative configuration of the ExecutionStrategy type for use with
// apply.
func ExecutionStrategy() *ExecutionStrategyApplyConfiguration {
	return &ExecutionStrategyApplyConfiguration{}
}

// WithExecutorType sets the ExecutorType field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ExecutorType field is set to the value of the last call.
func (b *ExecutionStrategyApplyConfiguration) WithExecutorType(value v1.ExecutorType) *ExecutionStrategyApplyConfiguration {
	b.ExecutorType = &value
	return b
}

// WithMinScale sets the MinScale field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the MinScale field is set to the value of the last call.
func (b *ExecutionStrategyApplyConfiguration) WithMinScale(value int) *ExecutionStrategyApplyConfiguration {
	b.MinScale = &value
	return b
}

// WithMaxScale sets the MaxScale field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the MaxScale field is set to the value of the last call.
func (b *ExecutionStrategyApplyConfiguration) WithMaxScale(value int) *ExecutionStrategyApplyConfiguration {
	b.MaxScale = &value
	return b
}

// WithTargetCPUPercent sets the TargetCPUPercent field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the TargetCPUPercent field is set to the value of the last call.
func (b *ExecutionStrategyApplyConfiguration) WithTargetCPUPercent(value int) *ExecutionStrategyApplyConfiguration {
	b.TargetCPUPercent = &value
	return b
}

// WithSpecializationTimeout sets the SpecializationTimeout field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the SpecializationTimeout field is set to the value of the last call.
func (b *ExecutionStrategyApplyConfiguration) WithSpecializationTimeout(value int) *ExecutionStrategyApplyConfiguration {
	b.SpecializationTimeout = &value
	return b
}

// WithMetrics adds the given value to the Metrics field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Metrics field.
func (b *ExecutionStrategyApplyConfiguration) WithMetrics(values ...v2.MetricSpec) *ExecutionStrategyApplyConfiguration {
	for i := range values {
		b.Metrics = append(b.Metrics, values[i])
	}
	return b
}

// WithBehavior sets the Behavior field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Behavior field is set to the value of the last call.
func (b *ExecutionStrategyApplyConfiguration) WithBehavior(value v2.HorizontalPodAutoscalerBehavior) *ExecutionStrategyApplyConfiguration {
	b.Behavior = &value
	return b
}
