/*
Copyright The Fission Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/fission/fission/pkg/apis/core/v1"
)

// FunctionReferenceApplyConfiguration represents an declarative configuration of the FunctionReference type for use
// with apply.
type FunctionReferenceApplyConfiguration struct {
	Type            *v1.FunctionReferenceType `json:"type,omitempty"`
	Name            *string                   `json:"name,omitempty"`
	FunctionWeights map[string]int            `json:"functionweights,omitempty"`
}

// FunctionReferenceApplyConfiguration constructs an declarative configuration of the FunctionReference type for use with
// apply.
func FunctionReference() *FunctionReferenceApplyConfiguration {
	return &FunctionReferenceApplyConfiguration{}
}

// WithType sets the Type field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Type field is set to the value of the last call.
func (b *FunctionReferenceApplyConfiguration) WithType(value v1.FunctionReferenceType) *FunctionReferenceApplyConfiguration {
	b.Type = &value
	return b
}

// WithName sets the Name field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Name field is set to the value of the last call.
func (b *FunctionReferenceApplyConfiguration) WithName(value string) *FunctionReferenceApplyConfiguration {
	b.Name = &value
	return b
}

// WithFunctionWeights puts the entries into the FunctionWeights field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the FunctionWeights field,
// overwriting an existing map entries in FunctionWeights field with the same key.
func (b *FunctionReferenceApplyConfiguration) WithFunctionWeights(entries map[string]int) *FunctionReferenceApplyConfiguration {
	if b.FunctionWeights == nil && len(entries) > 0 {
		b.FunctionWeights = make(map[string]int, len(entries))
	}
	for k, v := range entries {
		b.FunctionWeights[k] = v
	}
	return b
}
