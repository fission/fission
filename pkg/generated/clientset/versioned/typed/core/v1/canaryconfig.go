/*
Copyright The Fission Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by client-gen. DO NOT EDIT.

package v1

import (
	"context"

	v1 "github.com/fission/fission/pkg/apis/core/v1"
	corev1 "github.com/fission/fission/pkg/generated/applyconfiguration/core/v1"
	scheme "github.com/fission/fission/pkg/generated/clientset/versioned/scheme"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	gentype "k8s.io/client-go/gentype"
)

// CanaryConfigsGetter has a method to return a CanaryConfigInterface.
// A group's client should implement this interface.
type CanaryConfigsGetter interface {
	CanaryConfigs(namespace string) CanaryConfigInterface
}

// CanaryConfigInterface has methods to work with CanaryConfig resources.
type CanaryConfigInterface interface {
	Create(ctx context.Context, _canaryConfig *v1.CanaryConfig, opts metav1.CreateOptions) (*v1.CanaryConfig, error)
	Update(ctx context.Context, _canaryConfig *v1.CanaryConfig, opts metav1.UpdateOptions) (*v1.CanaryConfig, error)
	// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
	UpdateStatus(ctx context.Context, _canaryConfig *v1.CanaryConfig, opts metav1.UpdateOptions) (*v1.CanaryConfig, error)
	Delete(ctx context.Context, name string, opts metav1.DeleteOptions) error
	DeleteCollection(ctx context.Context, opts metav1.DeleteOptions, listOpts metav1.ListOptions) error
	Get(ctx context.Context, name string, opts metav1.GetOptions) (*v1.CanaryConfig, error)
	List(ctx context.Context, opts metav1.ListOptions) (*v1.CanaryConfigList, error)
	Watch(ctx context.Context, opts metav1.ListOptions) (watch.Interface, error)
	Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts metav1.PatchOptions, subresources ...string) (result *v1.CanaryConfig, err error)
	Apply(ctx context.Context, _canaryConfig *corev1.CanaryConfigApplyConfiguration, opts metav1.ApplyOptions) (result *v1.CanaryConfig, err error)
	// Add a +genclient:noStatus comment above the type to avoid generating ApplyStatus().
	ApplyStatus(ctx context.Context, _canaryConfig *corev1.CanaryConfigApplyConfiguration, opts metav1.ApplyOptions) (result *v1.CanaryConfig, err error)
	CanaryConfigExpansion
}

// canaryConfigs implements CanaryConfigInterface
type canaryConfigs struct {
	*gentype.ClientWithListAndApply[*v1.CanaryConfig, *v1.CanaryConfigList, *corev1.CanaryConfigApplyConfiguration]
}

// newCanaryConfigs returns a CanaryConfigs
func newCanaryConfigs(c *CoreV1Client, namespace string) *canaryConfigs {
	return &canaryConfigs{
		gentype.NewClientWithListAndApply[*v1.CanaryConfig, *v1.CanaryConfigList, *corev1.CanaryConfigApplyConfiguration](
			"canaryconfigs",
			c.RESTClient(),
			scheme.ParameterCodec,
			namespace,
			func() *v1.CanaryConfig { return &v1.CanaryConfig{} },
			func() *v1.CanaryConfigList { return &v1.CanaryConfigList{} }),
	}
}
